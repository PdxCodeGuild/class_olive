'''
APIs
'''

# API means Application Programming Interface. 
# Interface can be thought of as a contract of service between two applications. 
# This contract defines how the two communicate with each other using requests and responses

# The Google Maps API and Twitter API may be among the most widely used API examples, 
# but most software-as-a-service (SaaS) providers offer APIs that let developers write code 
# that posts data to and retrieves data from the provider's site as well.

# What is an HTTP request?
# A HTTP request is a text string generated by the client and sent to the server 
# containing the specifications of the resource the client is asking for. A resource
# is anything that can accessed via the web. The HTTP request communicates which resource
# a client wants to interact with and how the client wants to interact with it, along 
# with some metadata held in the header related to the request.

# The resource the client wants to interact with is communicated 
# through the URL that is sent with the request. For example, if a 
# user entered http://twitter.com into their web browser, the web browser 
# would send a request to the server looking for the Twitter resource.


# What are the different types of request methods that can be included in an HTTP request?
# Four of the most common request methods are 

# GET, POST, PUT, and DELETE.

# GET requests generally ask for the resource to be returned unchanged. Sending a request to the homepage 
# of Twitter would be a GET request.

# POST requests are used to make a submission to the resource. This type of request would typically ask the 
# server to store new information, for example by writing it to a database. Posting a new tweet would be an 
# example of a POST request.

# PUT requests are used to update a resource. Editing a tweet would be an example of a PUT request.

# DELETE requests are used to remove a resource. For example, deleting a tweet would be an example of a DELETE request.



# What is an HTTP response?
# An HTTP response is what is sent by a server to a client in response to an 
# HTTP request. These responses contain a status code and if the request was
# successful, the requested resource. An example status code for a successful 
# request would be “200” and an example status code for an unsuccessful request
# would be “404”. Other common status codes include “300” for redirects and “500” 
# for server errors.

# Good article https://medium.com/@jen_strong/the-request-response-cycle-of-the-web-1b7e206e9047


# Using an API -----------------------------------------------------------------------------------------------------------------------
# Geek Joke API Docs
# https://github.com/sameerkumar18/geek-joke-api

# first time you want to use requests, you need to install it.
# for example
# pip install requests

"""
import requests, json

url = "https://geek-jokes.sameerkumar.website/api?format=json"

response = requests.get(url)

data = json.loads(response.text)

print(data['joke'])
"""


# Art of Chicago example https://api.artic.edu/docs/  ------------------------

import requests, json

url = 'https://api.artic.edu/api/v1/artworks/27993?fields=id,title,image_id'


response = requests.get(url)

data = json.loads(response.text)

# print(data)

config = data['config']['iiif_url'] # https://www.artic.edu/iiif/2

image_id = data['data']['image_id']

artwork_url = f'{config}/{image_id}/full/843,/0/default.jpg' 

print(f"{data['data']['title']} url: {artwork_url}")


